import os
import sys
import requests
from dotenv import load_dotenv

# Load API key from .env file
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not GROQ_API_KEY:
    raise ValueError("⚠ GROQ_API_KEY not found. Please add it to your .env file")

# API config
url = "https://api.groq.com/openai/v1/chat/completions"
headers = {
    "Authorization": f"Bearer {GROQ_API_KEY}",
    "Content-Type": "application/json"
}

def get_dynamic_pitch(user_idea, role_prompt=None, model="llama-3.3-70b-versatile"):
    """
    Generate a dynamic startup pitch, SWOT analysis, and mentor feedback.

    :param user_idea: str - User's startup idea
    :param role_prompt: str - Optional role prompt to customize tone/context
    :param model: str - Model name (default: llama-3.3-70b-versatile)
    :return: str - Generated response or error
    """

    # Default system role
    system_prompt = role_prompt or (
        "You are a startup mentor and investor. "
        "Provide constructive feedback, generate a 1-minute pitch, and a SWOT analysis."
    )

    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"My startup idea is: {user_idea}"}
        ],
        "temperature": 0.7,
        "max_tokens": 600
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        result = response.json()

        # Safely extract response text
        if "choices" in result and len(result["choices"]) > 0:
            return result["choices"][0]["message"]["content"]
        else:
            return "⚠ No response generated by the model."

    except requests.exceptions.RequestException as e:
        return f"❌ Request failed: {e}"
    except KeyError:
        return f"⚠ Unexpected response format: {result}"

if __name__ == "__main__":   # ✅ Fixed here
    # Get startup idea from command line, else use default
    if len(sys.argv) > 1:
        idea = sys.argv[1]
    else:
        idea = "An AI-powered personal nutrition coach that customizes meal plans using health data."
    
    # Example role (can be customized)
    role = "You are a critical venture capitalist. Focus on risks, scalability, and ROI."

    output = get_dynamic_pitch(idea, role_prompt=role)
    print("\n=== Generated Output ===\n")
    print(output)
